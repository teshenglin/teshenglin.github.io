<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>numerical_integration | Te-Sheng Lin</title>
    <link>https://teshenglin.github.io/tags/numerical_integration/</link>
      <atom:link href="https://teshenglin.github.io/tags/numerical_integration/index.xml" rel="self" type="application/rss+xml" />
    <description>numerical_integration</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 19 Jun 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://teshenglin.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>numerical_integration</title>
      <link>https://teshenglin.github.io/tags/numerical_integration/</link>
    </image>
    
    <item>
      <title>Clenshaw–Curtis quadrature</title>
      <link>https://teshenglin.github.io/post/2020_numerical_integration_4/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://teshenglin.github.io/post/2020_numerical_integration_4/</guid>
      <description>&lt;p&gt;前情提要: 
&lt;a href=&#34;https://teshenglin.github.io/post/2019_numerical_integration&#34;&gt;數值積分初探&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前情提要: 
&lt;a href=&#34;https://teshenglin.github.io/post/2020_numerical_integration_2&#34;&gt;以內插多項式來做數值積分&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前情提要: 
&lt;a href=&#34;https://teshenglin.github.io/post/2020_numerical_integration_3&#34;&gt;高斯積分&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;我們想要利用 Chebyshev polynomial 來算積分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;goal-任意給定一可積分函數-fx-xin-1-1-我們想要算-int1_-1-fx-dx&#34;&gt;Goal: 任意給定一可積分函數 $f(x)$, $x\in[-1, 1]$, 我們想要算 $\int^1_{-1} f(x) dx$.&lt;/h4&gt;
&lt;hr&gt;
&lt;h4 id=&#34;idea&#34;&gt;Idea:&lt;/h4&gt;
&lt;p&gt;我們簡單做個變數變換 $x = \cos\theta$ 可以得到
$$
\int^1_{-1} f(x) dx = \int^{\pi}_0 f(\cos\theta)\sin\theta d\theta.
$$
所以如果我能將 $f(x)$ 這個函數以 second kind Chebyshev polynomial 來做展開, i.e.,
$$
f(x) = \sum^N_{k=0} a_k T_k(x) = \sum^N_{k=0} a_k \cos(k\cos^{-1}x) = \sum^N_{k=0} a_k \cos(k\theta)=f(\cos\theta).
$$
那代入後我們就有
$$
\int^1_{-1} f(x) dx = \int^{\pi}_0 \sum^N_{k=0} a_k \cos(k\theta)\sin\theta d\theta = \sum^{N/2}_{k=0}\frac{2 a_{2k}}{1-(2k)^2}.
$$&lt;/p&gt;
&lt;p&gt;因此, 若我們知道如何求一個函數的 Chebyshev coefficients, $a_k$, 那我們很容易就可以計算 $\int^1_{-1}f(x)dx$.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;簡單的 Matlab 程式如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% generate grid points
N = 25;
x = -sin((-N:2:N)&#39;*pi/(2*N));

% evaluate at grid points
f = exp(sin(x));

% extend the function and take scaled FFT
f_extend = [f; f(N: -1:2)];
f_hat = fft(f_extend)/(2*N);

% obtain the Chebyshev coefficients
a = zeros(N+1,1);
a(1) = real(f_hat(1));
a(2:N) = 2*real(f_hat(2:N));
a(N+1) = real(f_hat(N+1));

% Clenshaw–Curtis weights
w = zeros(1,N+1);
if(mod(N,2)==0)
    M = N/2;
else
    M = (N-1)/2;
end
w(1:2:end) = 2./(1-4*(0:M).^2);

% Clenshaw–Curtis quadrature
w*a
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;以上做法是先將函數取值, 算其係數, 再求其積分.
不過實際上我們應該能將積分權重直接算出來, 如此一來我們就能直接由函數值求積分了.
也就是說我們希望能寫成以下這式子:
$$
\int^1_{-1} f(x)dx \approx \sum^N_{k=0} w_k f(x_k), \quad x_k = \cos\left(\frac{k\pi}{N}\right).
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;積分權重&#34;&gt;積分權重:&lt;/h4&gt;
&lt;p&gt;要求得積分權重我們首先回顧一下上面的作法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先將點做 even extension&lt;/li&gt;
&lt;li&gt;做 FFT&lt;/li&gt;
&lt;li&gt;由 Fourier coefficients 求得 Chebyshev coefficients&lt;/li&gt;
&lt;li&gt;再將係數乘上積分權重即得到積分值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上步驟可以寫成矩陣形式:
$$
q = [\pmb{w}][\pmb{I}]^T[\pmb{F}][\pmb{I}][\pmb{f}]
$$
其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$[\pmb{f}]$ 是函數值, 是個 $(N+1)\times 1$ 的矩陣&lt;/li&gt;
&lt;li&gt;$[\pmb{I}]$ 是 even extension 是個 $2N\times (N+1)$ 的矩陣&lt;/li&gt;
&lt;li&gt;$[\pmb{F}]$ 是 Fourier transform 是個 $2N\times 2N$ 的矩陣&lt;/li&gt;
&lt;li&gt;$[\pmb{w}]$ 是 Clenshaw–Curtis 對於係數的 weights 是個 $1\times (N+1)$ 的矩陣&lt;/li&gt;
&lt;li&gt;$q$ 是最後得到的數值積分值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以這樣看就很清楚, Clenshaw–Curtis 對於函數值的 weights 事實上就是 $[\pmb{w}][\pmb{I}]^T[\pmb{F}][\pmb{I}]$ 這串矩陣乘法.
也就是說如果我定義
$$
[CCW]=[\pmb{w}][\pmb{I}]^T[\pmb{F}][\pmb{I}],
$$
則我們有
$$
q = [CCW][\pmb{f}]
$$
而由於 $[\pmb{F}]$ 是對稱矩陣, 我們可以把這整個做矩陣轉置, 這樣就很清楚要怎樣求 weight 了
$$
[CCW]^T = [\pmb{I}]^T[\pmb{F}]^T[\pmb{I}][\pmb{w}]^T,
$$
其中 $[\pmb{F}]^T$ 這個矩陣乘法則是以 iFFT 來加速計算.&lt;/p&gt;
&lt;p&gt;簡單的 Matlab 程式如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;N=25;

w = zeros(1,N+1);
if(mod(N,2)==0)
    M=N/2;
else
    M = (N-1)/2;
end
w(1:2:end) = 2./(1-4*(0:M).^2);

w2 = [w, w(N: -1:2)];
CCW = ifft(w2&#39;);
CCW = [CCW(1), 2*CCW(2:N)&#39;, CCW(N+1)];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有了權重後即可由函數值直接求得積分值:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% generate grid points
N = 25;
x = -sin((-N:2:N)&#39;*pi/(2*N));

% evaluate at grid points
f = exp(sin(x));

% Clenshaw–Curtis quadrature
CCW*f
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>以內插多項式來做數值積分</title>
      <link>https://teshenglin.github.io/post/2020_numerical_integration_2/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://teshenglin.github.io/post/2020_numerical_integration_2/</guid>
      <description>&lt;p&gt;前情提要: 
&lt;a href=&#34;https://teshenglin.github.io/post/2019_numerical_integration&#34;&gt;數值積分初探&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;連續函數可以用多項式來逼近它, 因此直覺來講, 既然我們已經找到一個離給定函數&amp;quot;很近&amp;quot;的多項式了, 何不就以這個多項式的積分值來當成原函數積分值的一個逼近呢.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;goal-任意給定一可積分函數-fx-xin-1-1-我們想要算-int1_-1-fx-dx&#34;&gt;Goal: 任意給定一可積分函數 $f(x)$, $x\in[-1, 1]$, 我們想要算 $\int^1_{-1} f(x) dx$.&lt;/h4&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;我們先講內插多項式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;給定任意 $n+1$ 個不重複的點在 $[-1, 1]$ 區間, 我們把他們記為 $x_0, x_1, \cdots, x_n.$
接著我們計算函數 $f(x)$ 在這些點上的值, 記為 $f_i = f(x_i)$, 這樣我們就有平面上的 $n+1$ 個點座標 $(x_i, f_i)$.&lt;/p&gt;
&lt;p&gt;有這些點我們就一定能找到一個 $n$ 次多項式 $p_n(x)$ 使得說這個多項式會通過這些所有的點, 也就是 $p_n(x_i) = f_i$. 這就叫做內插多項式.&lt;/p&gt;
&lt;p&gt;內插多項式一個很簡潔的表示法是把它寫成 Lagrange polynomial 的樣子. 我們先引進 Lagrange basis function
$$
\ell_i(x) = \prod^n_{k=0, k\ne i} \frac{x-x_k}{x_i-x_k}.
$$
很明顯可以看出這是一個 $n$ 次多項式, 而且有很特殊的性質, 也就是 $\ell_i(x_j)=\delta_{ij}$.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$\delta_{ij}$ 是所謂的 Kronecker delta function, 如果 $i=j$ 則 $\delta_{ij}=1$, 反之如果 $i\ne j$ 則 $\delta_{ij}=0$. 舉例來說, $\delta_{11}=1$, 而 $\delta_{12}=0$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此我們可以將內插多項式 $p_n(x)$ 改寫成
$$
p_n(x) = \sum^n_{i=0} f_i \ell_i(x).
$$
這就是內插多項式的 Lagrange 表示法.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;接著我們就可以來做積分了!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們直接以內插多項式來逼近函數並做積分,
$$
\int^1_{-1} f(x)dx \approx \int^1_{-1} p_n(x)dx = \int^1_{-1} \sum^n_{i=0} f_i \ell_i(x)dx = \sum^n_{i=0} f_i \left(\int^1_{-1} \ell_i(x)dx\right).
$$
理論上, 如果插值點 $x_i$ 是一開始就給定並且固定的, 那我們就可以把 Lagrange basis function $\ell_i(x)$ 算出來, 並且把他的積分也算出來. 我們把積分出來的值記為 $w_i$, 也就是
$$
w_i = \int^1_{-1} \ell_i(x)dx.
$$
如此我們就可以把積分改寫成
$$
\int^1_{-1} f(x)dx \approx \sum^n_{i=0} w_i f_i.
$$
這就是以內插多項式來做積分.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Remark:&lt;/strong&gt; 如果 $f(x)$ 本身就是個 $n$ 次或以下的多項式, 那我們做出來的內插多項式就不是 approximation 而是等號了. 那這樣我們做出來的積分事實上應該就是等號! 也就是說
$$
\int^1_{-1} p(x)dx = \sum^n_{i=0} w_i f_i,
$$
where $p(x)$ is a polynomial with degree less than or equals to $n$.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;舉個簡單的例子來試試&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假設我們只想要用兩個端點來估算積分, 那我們有 $x_0=-1, x_1=1$. 因此得到 Lagrange basis polynomials
$$
\ell_0(x) = \frac{x+1}{2}, \quad \ell_1(x)=\frac{x-1}{-2}.
$$
接著可以算出
$$
w_0 = \int^1_{-1} \ell_0(x)dx = 1, \quad w_1=\int^1_{-1}\ell_1(x)dx=1.
$$
也就是說
$$
\int^1_{-1} f(x)dx \approx f(-1) + f(1),
$$
得到所謂的梯形法!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;延伸閱讀: 
&lt;a href=&#34;https://teshenglin.github.io/post/2020_numerical_integration_3&#34;&gt;高斯積分&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>高斯積分</title>
      <link>https://teshenglin.github.io/post/2020_numerical_integration_3/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://teshenglin.github.io/post/2020_numerical_integration_3/</guid>
      <description>&lt;p&gt;前情提要: 
&lt;a href=&#34;https://teshenglin.github.io/post/2019_numerical_integration&#34;&gt;數值積分初探&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前情提要: 
&lt;a href=&#34;https://teshenglin.github.io/post/2020_numerical_integration_2&#34;&gt;以內插多項式來做數值積分&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;我們想要找到一些插值點使得以內插多項式來做數值積分會最準. 這就是高斯積分.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;goal-任意給定一可積分函數-fx-xin-1-1-我們想要算-int1_-1-fx-dx&#34;&gt;Goal: 任意給定一可積分函數 $f(x)$, $x\in[-1, 1]$, 我們想要算 $\int^1_{-1} f(x) dx$.&lt;/h4&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;複習一下內插多項式的積分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;給定任意 $n+1$ 個不重複的點在 $[-1, 1]$ 區間, 記為 $x_0, x_1, \cdots, x_n.$ 我們可以逼近函數 $f(x)$ 的積分
$$
\int^1_{-1} f(x)dx \approx \sum^n_{i=0} w_i f_i,
$$
其中 $f_i = f(x_i)$, 並且
$$
w_i = \int^1_{-1} \ell_i(x)dx = \int^1_{-1} \left(\prod^n_{k=0, k\ne i} \frac{x-x_k}{x_i-x_k}\right) dx.
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一個重要的 remark: 如果 $p(x)$ 是個 $n$ 次或以下的多項式, 那這個積分是等號!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是說
$$
\int^1_{-1} p(x)dx = \sum^n_{i=0} w_i f_i,
$$
where $p(x)$ is a polynomial with degree less than or equals to $n$.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;idea&#34;&gt;Idea:&lt;/h4&gt;
&lt;p&gt;高斯積分的想法就是, 我想要找到特別的點 $x_i$ 以及特別的權重 $w_i$ 使得我能算準的多項式次數最高.&lt;/p&gt;
&lt;p&gt;如果我們回想一下內插多項式, 給定點然後求 $n+1$ 個權重, 也就是有 $n+1$ 個未知數, 那顯然它所能滿足的方程式就是 $n+1$ 個. 如果要把多項式算準的話從常數($0$次)到 $n$次共可以列出剛好 $n+1$個方程式. 所以最多能把 $n$ 次多項式算準.&lt;/p&gt;
&lt;p&gt;現在假設點($x_i$)跟權重($w_i$)都是待決定的, 那我就有 $2(n+1)$ 個未知數, 能夠把多項式從常數($0$次)到 $2n+1$次都算準. 所以理論上, $n+1$ 個點的高斯積分可以將 $2n+1$次的多項式算準, 完全沒有誤差.&lt;/p&gt;
&lt;p&gt;那如果這這樣的想法直接列式的話就會得到以下 $2n+1$ 個方程式
$$
\int^1_{-1} x^m dx=\frac{1 - (-1)^{m+1}}{m+1} =  \sum^n_{i=0} w_i x^m_i, \quad 0\le m\le 2n+1.
$$
然後解以上的非線性聯立方程式就可以得到所有的點 $x_i$ 及權重 $w_i$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;看起來有點困難&lt;/strong&gt;, 不過好消息是其實不難解.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;我們需要引進正交多項式 (orthogonal polynomials)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在線性代數裡我們知道兩個向量如果正交則其內積等於零. 函數空間裡我們也可以做一樣的定義, 我們定義兩個函數的內積
$$
(f, g) = \int^1_{-1} f(x)g(x) dx.
$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;
&lt;p&gt;$f(x)$ and $g(x)$ are orthogonal if $(f,g)=0$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們知道 $n$ 次多項式有一組最基本的基底 ${1, x, x^2, \cdots, x^n}$, 將這組基底以 Gram-Schimidt 做正交化就可以得到一組正交基底. 這組正交基底就是所謂的 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Legendre_polynomials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Legendre polynomials&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;我們將 Legendre polynomials 這組正交基底記為 $P_i(x)$, 其前三個如下:
$$
P_0(x) = 1, \quad P_1(x) = x, \quad P_2(x)=\frac{1}{2}(3x^2-1).
$$&lt;/p&gt;
&lt;p&gt;Legendre polynomials 有以下兩個性質:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$P_i(x)$ 是一個 $i$次多項式&lt;/li&gt;
&lt;li&gt;$(P_i(x), P_j(x)) = \delta_{ij} = \begin{cases}
0, \quad i\ne j, \\&lt;br&gt;
1, \quad i=j.
\end{cases}$
&lt;ul&gt;
&lt;li&gt;對任何多項式 $Q(x)$ 如果其次數小於 $i$, 則有 $(P_i(x), Q(x))=0$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id=&#34;高斯積分的點與權重&#34;&gt;高斯積分的點與權重:&lt;/h4&gt;
&lt;p&gt;任意給定一個 $2n+1$ 次多項式 $p(x)$, 我們可以透過多項式的除法把它分解成以下這種樣子
$$
p(x) = P_{n+1}(x)Q(x) + R(x),
$$
其中 $Q(x)$ 以及 $R(x)$ 都是至多 $n$ 次的多項式. 透過這樣的分解我們發現
$$
\int^1_{-1} p(x)dx = \int^1_{-1} P_{n+1}(x)Q(x) + R(x)dx = \int^1_{-1} R(x)dx,
$$
其中 $P_{n+1}$ 與 $Q$ 相乘後的積分等於零是用到上面正交多項式的性質.&lt;/p&gt;
&lt;p&gt;以上這積分如果以數值積分來表示的話就是
$$
\int^1_{-1} p(x)dx \approx \sum^n_{i=0} w_i p(x_i) = \sum^n_{i=0} w_i \left(P_{n+1}(x_i)Q(x_i) + R(x_i)\right).
$$
我們希望數值積分也會有 &amp;ldquo;$P_{n+1}$ 與 $Q$ 相乘的積分等於零&amp;rdquo; 這件事. 那一個最簡單的取法就是我們取 $x_i$ 是 $P_{n+1}(x)$ 這個 $n+1$ 次多項式所有的根. 由於 $P_{n+1}$ 剛好有 $n+1$ 個不重複的根, 這樣我們就有 $x_i$ 這些點了, 而且 $P_{n+1}(x_i)=0$ 表示
$$
\sum^n_{i=0} w_i P_{n+1}(x_i)Q(x_i)=0,
$$
所以
$$
\int^1_{-1} p(x)dx \approx \sum^n_{i=0} w_i R(x_i),
$$
也就是說我們只需要把 $R(x)$ 這個 $n$ 次多項式算準就好. 那我們就可以用內插多項式算權重的方法把權重都寫下來
$$
w_i = \int^1_{-1} \left(\prod^n_{k=0, k\ne i} \frac{x-x_k}{x_i-x_k}\right) dx.
$$&lt;/p&gt;
&lt;p&gt;如此, 我們就把&lt;code&gt;點&lt;/code&gt;跟&lt;code&gt;權重&lt;/code&gt;都求出來了.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary:&lt;/h3&gt;
&lt;p&gt;最後總結一下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$n+1$ 個點的高斯積分可以將 $2n+1$ 次多項式算準無誤差&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高斯點是正交多項式 $P_{n+1}(x)$ 的 $n+1$ 個根&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;求出高斯點後我們以內插多項式的做法來求出權重&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;舉個簡單的例子來試試&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假設我們只想要用兩個點來估算積分, 那 Legendre polynomial 的 $P_2(x)=\frac{1}{2}(3x^2-1)$.&lt;/p&gt;
&lt;p&gt;由此可算出兩個高斯點, 也就是 $P_2$ 的兩個根是
$$
x_0 = -\frac{1}{\sqrt{3}}, \quad x_1 = \frac{1}{\sqrt{3}}.
$$
接著權重也可以簡單的算出來, 我們得到.
$$
w_0 = w_1 = 1.
$$
因此, 兩個點的高斯積分公式是
$$
\int^1_{-1} f(x)dx = f\left(-\frac{1}{\sqrt{3}}\right) + f\left(\frac{1}{\sqrt{3}}\right),
$$
可以將 3次(含)以下的多項式算準無誤差.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;再延伸一下&#34;&gt;再延伸一下&lt;/h4&gt;
&lt;p&gt;對於更廣義有權重的積分
$$
\int^1_{-1} w(x)f(x)dx,
$$
我們只要找出相對應的正交多項式, 我們一樣可以求出其高斯積分點以及權重.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;舉例來說, $w(x)=\frac{1}{1+x^2}$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其相對應的內積以及積分為
$$
(f,g) = \int^1_{-1} \frac{1}{1+x^2}f(x)g(x)dx, \quad \int^1_{-1} \frac{1}{1+x^2}f(x)dx.
$$
其正交多項式為 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Chebyshev_polynomials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chebyshev polynomials&lt;/a&gt;, $T_i(x)$, 前三項為:
$$
T_0(x) = 1, \quad T_1(x) =x, \quad T_2(x) = 2x^2-1.
$$
比較特別的是其高斯點, 稱為 Gauss-Chebyshev points, 可以直接求出來:
$$
x_i = \cos\left(\frac{(i+\frac{1}{2})\pi}{n+1}\right), \quad 0\le i\le n.
$$
而且權重也可以直接求出來:
$$
w_i = \frac{\pi}{n+1}.
$$&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>數值積分初探</title>
      <link>https://teshenglin.github.io/post/2019_numerical_integration/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://teshenglin.github.io/post/2019_numerical_integration/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在微積分課程裡我們有學到積分的&#39;中點法&amp;rsquo;, &amp;lsquo;梯形法&#39;以及&#39;辛普森法&amp;rsquo;. 這裡我們簡介一些基本概念並且引進高斯積分法.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;goal-任意給定一可積分函數-fx-xin-1-1-我們想要算-int1_-1-fx-dx&#34;&gt;Goal: 任意給定一可積分函數 $f(x)$, $x\in[-1, 1]$, 我們想要算 $\int^1_{-1} f(x) dx$.&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Remark:&lt;/strong&gt; 對任一個積分式 $\int^b_{a} g(x),dx$ 我們皆可用變數變換來將此積分轉到 $[-1, 1]$ 這個區間. 所以我們只需考慮 $[-1, 1]$ 即可.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;首先我們討論一下哪種方法比較準. 一個最簡單的判斷方法是看積分法能不能將多項式算準.&lt;/p&gt;
&lt;p&gt;我們考慮三種積分法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Midpoint rule: $\int^1_{-1}f(x),dx\approx 2f(0)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trapezoidal rule: $\int^1_{-1}f(x),dx\approx f(-1)+f(1)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simpson&amp;rsquo;s rule: $\int^1_{-1}f(x),dx\approx \frac{1}{3}(f(-1)+4f(0)+f(1))$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我們先檢驗常數函數: $\int^1_{-1} 1,dx=2$. 很快我們就可以發現以上三種方法都可以得出完全正確的答案.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接著我們檢驗一次函數: $\int^1_{-1} x,dx=0$. 一樣, 三種方法都得出正確答案.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二次函數: $\int^1_{-1} x^2,dx=\frac{2}{3}$. 對於二次函數我們發現, 中點法以及梯形法都無法算出正確答案, 只有辛普森法能成功.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三次函數: $\int^1_{-1} x^3,dx=0$. 對於三次函數我們只檢驗辛普森法, 發現三次函數辛普森法也能算準.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四次函數: $\int^1_{-1} x^4,dx=\frac{2}{5}$. 對於四次函數, 辛普森法就算錯了.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;小結論&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中點跟梯形法準確率相同, 能準確的算出任意一次多項式的積分值.&lt;/li&gt;
&lt;li&gt;辛普森法比中點及梯形法更準確, 並且它能準確的算出任意三次多項式的積分值.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;接著我們稍微推廣一下, 並且介紹所謂的&#39;高斯積分&amp;rsquo;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; 假設我們現在想要用函數在 $x=0$ 這個點的值來估算積分, 那係數要取多少會最好?&lt;/p&gt;
&lt;p&gt;也就是說我們假設
$$\int^1_{-1}f(x),dx\approx A_0f(0),$$
其中 $A_0$ 是個常數. 那 $A_0$ 要選哪個數字, 這個積分公式才會算的最準?&lt;/p&gt;
&lt;p&gt;依照我們之前的想法, 要讓積分式準就是要讓他把多項式算準. 所以我們希望他至少能把常數函數算準. 這樣的話很容易就看出 $A_0=2$, 也就是&#39;中點法&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; 假設我們現在想要用函數在 $x=-1$ 以及 $x=1$ 這兩個點的值來估算積分, 那係數要取多少會最好?&lt;/p&gt;
&lt;p&gt;也就是說我們假設
$$\int^1_{-1}f(x),dx\approx \alpha f(-1)+\beta f(1),$$
其中 $\alpha, \beta$ 是常數.&lt;/p&gt;
&lt;p&gt;我們有兩個未知數, 所以我們希望他至少能把常數及一次函數算準. 這樣的話我們可以列出方程式:
$$
\alpha + \beta = 2, \quad -\alpha + \beta = 0.
$$
解方程式我們得到 $\alpha=\beta=1$, 也就是梯形法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; 假設我們現在只想用兩個點的值來估算積分, 那怎樣做會最好?&lt;/p&gt;
&lt;p&gt;也就是說我們假設
$$\int^1_{-1}f(x),dx\approx A_0 f(x_0)+A_1 f(x_1),$$
其中 $A_0, A_1, x_0, x_1$ 都待決定.&lt;/p&gt;
&lt;p&gt;我們有四個未知數, 所以理想狀況下應該能從常數到三次多項式都能算準, 依此可以列出四個方程式:
$$
\begin{aligned}
A_0 + A_1 &amp;amp;= 2 \\\&lt;br&gt;
A_0x_0 + A_1x_1 &amp;amp;= 0 \\\&lt;br&gt;
A_0x^2_0 + A_1x^2_1 &amp;amp;= \frac{2}{3} \\\&lt;br&gt;
A_0x^3_0 + A_1x^3_1 &amp;amp;= 0.
\end{aligned}
$$
解方程式我們得到 $A_0=A_1=1$, $x_0=-\frac{1}{\sqrt{3}}$, $x_1=\frac{1}{\sqrt{3}}$. 也就是說&lt;/p&gt;
&lt;p&gt;$$
\int^1_{-1} f(x),dx \approx f\left(-\frac{1}{\sqrt{3}}\right)+ f\left(\frac{1}{\sqrt{3}}\right).
$$
這就是所謂的兩點高斯積分公式 (two-point Gaussian quadrature formula).&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;最後我們看一下以數值積分來估算的例子.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們想計算 $\int^1_{-1} e^x,dx$, 當然我們知道答案是 $e^1-e^{-1}$, 不過我們想要知道若以上列幾種方法估算會有多準確.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remark:&lt;/strong&gt; 一般來說我們會先將所要積分的範圍分成 $n$ 等分, 接著在每一等分上使用上列積分法. 這就是微積分課本中所介紹的合成積分法 (composite integral rules). 實作上的細節我們就不在這裡討論.&lt;/p&gt;
&lt;p&gt;我們將 $[-1, 1]$ 區間均勻分成 $n$ 等分, 再用三種不同積分法來估算積分值. 下表列出不同積分法在不同區間數所得之值與實際值之間的絕對誤差.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;n\Method&lt;/th&gt;
&lt;th&gt;Midpoint&lt;/th&gt;
&lt;th&gt;Trapezoidal&lt;/th&gt;
&lt;th&gt;Simpson&amp;rsquo;s&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;3.91e-3&lt;/td&gt;
&lt;td&gt;7.83e-3&lt;/td&gt;
&lt;td&gt;2.08e-5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;3.92e-5&lt;/td&gt;
&lt;td&gt;7.83e-5&lt;/td&gt;
&lt;td&gt;2.09e-9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;3.92e-7&lt;/td&gt;
&lt;td&gt;7.83e-7&lt;/td&gt;
&lt;td&gt;2.10e-13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我們可以看到, 中點以及梯形法誤差皆是以 $O(n^{-2})$ 來下降, 也就是點數變十倍時誤差會降一百倍, 而辛普森法則是 $O(n^{-4})$.&lt;/p&gt;
&lt;p&gt;接著我們試試看用高斯積分來做, 這裡我們就不分小區間, 直接做整個 $[-1, 1]$ 區間. 多個點的高斯積分的公式可在 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Gaussian_quadrature&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt; 找到. 我們將 $m$-point 高斯積分所得之值與實際值之間的絕對誤差列於下表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;m\Method&lt;/th&gt;
&lt;th&gt;Gaussian quadrature rule&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;7.71e-3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;6.55e-5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2.95e-7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;8.25e-10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;1.56e-12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2.66e-15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;4.44e-16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以看到我們用 8 個點就可以將這個積分準確估計到誤差接近機器的捨入誤差 (rounding error).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;延伸閱讀: 
&lt;a href=&#34;https://teshenglin.github.io/post/2020_numerical_integration_2&#34;&gt;以內差多項式來做數值積分&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;延伸閱讀: 
&lt;a href=&#34;https://teshenglin.github.io/post/2020_numerical_integration_3&#34;&gt;高斯積分&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
</description>
    </item>
    
  </channel>
</rss>
